!function () { var rsplit = function (a, b) { for (var e, f, g, c = b.exec(a), d = new Array; null != c; ) e = c.index, f = b.lastIndex, 0 != e && (g = a.substring(0, e), d.push(a.substring(0, e)), a = a.slice(e)), d.push(c[0]), a = a.slice(c[0].length), c = b.exec(a); return "" == !a && d.push(a), d }, chop = function (a) { return a.substr(0, a.length - 1) }, extend = function (a, b) { for (var c in b) b.hasOwnProperty(c) && (a[c] = b[c]) }; EJS = function (a) { if (a = "string" == typeof a ? { view: a} : a, this.set_options(a), a.precompiled) return this.template = {}, this.template.process = a.precompiled, EJS.update(this.name, this), void 0; if (a.customTpl && (EJS.customTpl = a.customTpl), a.element) { if ("string" == typeof a.element) { var b = a.element; if (a.element = document.getElementById(a.element), null == a.element) throw b + "does not exist!" } this.text = a.element.value ? a.element.value : a.element.innerHTML, this.name = a.element.id, this.type = "[" } else if (a.url) { a.url = EJS.endExt(a.url, this.extMatch), this.name = this.name ? this.name : a.url; var c = a.url, d = EJS.get(this.name, this.cache); if (d) return d; if (d == EJS.INVALID_PATH) return null; try { this.text = EJS.request(c + (this.cache ? "" : "?" + Math.random())) } catch (e) { } if (null == this.text) throw { type: "EJS", message: "There is no template at " + c} } var d = new EJS.Compiler(this.text, this.type); d.compile(a, this.name), EJS.update(this.name, this), this.template = d }, EJS.prototype = { render: function (a, b) { a = a || {}, this._extra_helpers = b; var c = new EJS.Helpers(a, b || {}); return this.template.process.call(a, a, c) }, update: function (element, options) { return "string" == typeof element && (element = document.getElementById(element)), null == options ? (_template = this, function (a) { EJS.prototype.update.call(_template, element, a) }) : ("string" == typeof options ? (params = {}, params.url = options, _template = this, params.onComplete = function (request) { var object = eval(request.responseText); EJS.prototype.update.call(_template, element, object) }, EJS.ajax_request(params)) : element.innerHTML = this.render(options), void 0) }, out: function () { return this.template.out }, set_options: function (a) { this.type = a.type || EJS.type, this.cache = null != a.cache ? a.cache : EJS.cache, this.text = a.text || null, this.name = a.name || null, this.ext = a.ext || EJS.ext, this.extMatch = new RegExp(this.ext.replace(/\./, ".")) } }, EJS.endExt = function (a, b) { return a ? (b.lastIndex = 0, a + (b.test(a) ? "" : this.ext)) : null }, EJS.Scanner = function (a, b, c) { extend(this, { left_delimiter: b + "%", right_delimiter: "%" + c, double_left: b + "%%", double_right: "%%" + c, left_equal: b + "%=", left_comment: b + "%#" }), this.SplitRegexp = "[" == b ? /(\[%%)|(%%\])|(\[%=)|(\[%#)|(\[%)|(%\]\n)|(%\])|(\n)/ : new RegExp("(" + this.double_left + ")|(%%" + this.double_right + ")|(" + this.left_equal + ")|(" + this.left_comment + ")|(" + this.left_delimiter + ")|(" + this.right_delimiter + "\n)|(" + this.right_delimiter + ")|(\n)"), this.source = a, this.stag = null, this.lines = 0 }, EJS.Scanner.to_text = function (a) { return null == a || void 0 === a ? "" : a instanceof Date ? a.toDateString() : a.toString ? a.toString() : "" }, EJS.Scanner.prototype = { scan: function (a) { if (scanline = this.scanline, regex = this.SplitRegexp, "" == !this.source) for (var b = rsplit(this.source, /\n/), c = 0; c < b.length; c++) { var d = b[c]; this.scanline(d, regex, a) } }, scanline: function (a, b, c) { this.lines++; for (var d = rsplit(a, b), e = 0; e < d.length; e++) { var f = d[e]; if (null != f) try { c(f, this) } catch (g) { throw { type: "EJS.Scanner", line: this.lines} } } } }, EJS.Buffer = function (a, b) { this.line = new Array, this.script = "", this.pre_cmd = a, this.post_cmd = b; for (var c = 0; c < this.pre_cmd.length; c++) this.push(a[c]) }, EJS.Buffer.prototype = { push: function (a) { this.line.push(a) }, cr: function () { this.script = this.script + this.line.join("; "), this.line = new Array, this.script = this.script + "\n" }, close: function () { if (this.line.length > 0) { for (var a = 0; a < this.post_cmd.length; a++) this.push(pre_cmd[a]); this.script = this.script + this.line.join("; "), line = null } } }, EJS.Compiler = function (a, b) { this.pre_cmd = ["var ___ViewO = [];"], this.post_cmd = new Array, this.source = " ", null != a && ("string" == typeof a ? (a = a.replace(/\r\n/g, "\n"), a = a.replace(/\r/g, "\n"), this.source = a) : a.innerHTML && (this.source = a.innerHTML), "string" != typeof this.source && (this.source = "")), b = b || "<"; var c = ">"; switch (b) { case "[": c = "]"; break; case "<": break; default: throw b + " is not a supported deliminator" } this.scanner = new EJS.Scanner(this.source, b, c), this.out = "" }, EJS.Compiler.prototype = { compile: function (options, name) { options = options || {}, this.out = ""; var put_cmd = "___ViewO.push(", insert_cmd = put_cmd, buff = new EJS.Buffer(this.pre_cmd, this.post_cmd), content = "", clean = function (a) { return a = a.replace(/\\/g, "\\\\"), a = a.replace(/\n/g, "\\n"), a = a.replace(/"/g, '\\"') }; this.scanner.scan(function (a, b) { if (null == b.stag) switch (a) { case "\n": content += "\n", buff.push(put_cmd + '"' + clean(content) + '");'), buff.cr(), content = ""; break; case b.left_delimiter: case b.left_equal: case b.left_comment: b.stag = a, content.length > 0 && buff.push(put_cmd + '"' + clean(content) + '")'), content = ""; break; case b.double_left: content += b.left_delimiter; break; default: content += a } else switch (a) { case b.right_delimiter: switch (b.stag) { case b.left_delimiter: "\n" == content[content.length - 1] ? (content = chop(content), buff.push(content), buff.cr()) : buff.push(content); break; case b.left_equal: buff.push(insert_cmd + "(EJS.Scanner.to_text(" + content + ")))") } b.stag = null, content = ""; break; case b.double_right: content += b.right_delimiter; break; default: content += a } }), content.length > 0 && buff.push(put_cmd + '"' + clean(content) + '")'), buff.close(), this.out = buff.script + ";"; var to_be_evaled = "/*" + name + "*/this.process = function(_CONTEXT,_VIEW) { try { with(_VIEW) { with (_CONTEXT) {" + this.out + " return ___ViewO.join('');}}}catch(e){e.lineNumber=null;throw e;}};"; try { eval(to_be_evaled) } catch (e) { if ("undefined" == typeof JSLINT) throw e; JSLINT(this.out); for (var i = 0; i < JSLINT.errors.length; i++) { var error = JSLINT.errors[i]; if ("Unnecessary semicolon." != error.reason) { error.line++; var e = new Error; throw e.lineNumber = error.line, e.message = error.reason, options.view && (e.fileName = options.view), e } } } } }, EJS.config = function (a) { EJS.cache = null != a.cache ? a.cache : EJS.cache, EJS.type = null != a.type ? a.type : EJS.type, EJS.ext = null != a.ext ? a.ext : EJS.ext; var b = EJS.templates_directory || {}; EJS.templates_directory = b, EJS.get = function (a, c) { return 0 == c ? null : b[a] ? b[a] : null }, EJS.update = function (a, c) { null != a && (b[a] = c) }, EJS.INVALID_PATH = -1 }, EJS.config({ cache: !0, type: "<", ext: ".html" }), EJS.Helpers = function (a, b) { this._data = a, this._extras = b, extend(this, b) }, EJS.Helpers.prototype = { view: function (a, b, c) { return c || (c = this._extras), b || (b = this._data), new EJS(a).render(b, c) }, to_text: function (a, b) { return null == a || void 0 === a ? b || "" : a instanceof Date ? a.toDateString() : a.toString ? a.toString().replace(/\n/g, "<br />").replace(/''/g, "'") : "" } }, EJS.newRequest = function () { for (var a = [function () { return new ActiveXObject("Msxml2.XMLHTTP") }, function () { return new XMLHttpRequest }, function () { return new ActiveXObject("Microsoft.XMLHTTP") } ], b = 0; b < a.length; b++) try { var c = a[b](); if (null != c) return c } catch (d) { continue } }, EJS.request = function (a) { var b = null; a && a.indexOf("http") < 0 && 0 == a.indexOf("/") && (a = document.location.protocol + "//" + window.location.host + a), b = a && a.indexOf(window.location.host) < 0 ? { responseText: "", open: function () { }, send: function () { EJS.customTpl && (this.responseText = EJS.customTpl, EJS.customTpl = "") }, status: 200} : new EJS.newRequest, b.open("GET", a, !1); try { b.send(null) } catch (c) { return null } return 404 == b.status || 2 == b.status || 0 == b.status && "" == b.responseText ? null : b.responseText }, EJS.ajax_request = function (a) { a.method = a.method ? a.method : "GET"; var b = new EJS.newRequest; b.onreadystatechange = function () { 4 == b.readyState && (200 == b.status ? a.onComplete(b) : a.onComplete(b)) }, b.open(a.method, a.url), b.send(null) } } ();